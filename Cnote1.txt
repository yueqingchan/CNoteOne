C基础总结:

1.编译程序的步骤:

  1)预处理:gcc -E hello.c  -o   hello.i
    展开头文件,宏定义展开,条件编译.删除注释,此刻不会校验语法错误.
  2)编译:  gcc -S hello.i  -o   hello.s
    检查语法,将预处理后的文件编译成汇编语言.
  3)汇编:  gcc -c hello.s  -o   hello.o
    将汇编文件生成目标文件,二进制文件.
  4)链接   gcc    hello.o  -o   hello.out
    把库和所依赖的各种库链接到最终的可执行程序中去.

   除了-c ,-E -S 都是大写.-c 可以直接执行.c文件.省略中间编译步骤.
   gcc -c hello.c -o hello.o

2.CPU,寄存器,缓存的关系

  按与CPU远近来分，离得最近的是寄存器，然后缓存(CPU缓存)，最后内存。

  CPU计算时，先预先把要用的数据从硬盘读到内存，然后再把即将要用的数据读到寄存器。于是 CPU<--->寄存器<--->内存，这就是它们之间的信息交换。

  那为什么有缓存呢？因为如果老是操作内存中的同一址地的数据，就会影响速度。于是就在寄存器与内存之间设置一个缓存。

  CPU〈---〉寄存器〈---> 缓存 <---> 内存

3.int b 它既是声明，同时又是定义
  对于 extern b来讲它只是声明不是定义

  声明不能赋值,因为已经被定义了.声明只是类似于导包的功能.

4.#define MAX 10 //声明了一个常量，名字叫MAX，值是10，常量的值一旦初始化不可改

  #include< > 与 #include ""的区别：
  < > 表示系统直接按系统指定的目录检索
  "" 表示系统先在 "" 指定的路径(没写路径代表当前路径)查找头文件，如果找不到，再按系统指定的目录检索


5.补码: 当前的计算机系统使用的基本上是二进制系统，数据在计算机中主要是以补码的形式存储的。

         int a=-15;
         printf("%x\n",a);
        /*
         * 结果为 fffffff1
         * fffffff1对应的二进制：1111 1111 1111 1111 1111 1111 1111 0001    补码
         * 符号位不变，其它取反： 1000 0000 0000 0000 0000 0000 0000 1110    反码
         * 上面加1               1000 0000 0000 0000 0000 0000 0000 1111    原码    最高位1代表负数，就是-15
         *
         */

      最高位的1溢出,剩余8位二进制表示的是3 ;
      重要:  补码运算,直接进位.符号位也需要进位. 全是加的运算.

      加法比减法的优势:
      原码表示法简单易懂，与带符号数本身转换方便，只要符号还原即可，
      但当两个正数相减或不同符号数相加时，必须比较两个数哪个绝对值大，才能决定谁减谁，才能确定结果是正还是负，所以原码不便于加减运算。

      	统一了零的编码
      	将符号位和其它位统一处理
      	将减法运算转变为加法运算
      	两个用补码表示的数相加时，如果最高位(符号位)有进位，则进位被舍弃

      补码转原码:
      补码符号位不动，其他位求反，最后整个数加1，得到原码
6.sizeof 和size_t
    	sizeof的返回值为size_t
    	size_t类型在32位操作系统下是unsigned int，是一个无符号的整数 //todo:size_t 需要补充.

7. %d  %x %X

8.字符串
  char c='\0' 结尾.ASCII的0,NUT字符. 不是数字 0.
9.数组
  int arr[10]; //内容默认随机
  int arr[10]={0}; //内容全部是0
  int arr[10]={1,2,3}; //内容前三个是1,2,3 ,后边是0

  数组名是一个地址的常量，代表数组中首元素的地址。
10.多维数组

11.字符串
   char str[]="Hello!";  编译器在最后默认自动追加\0.

12.打印时间和随机数
   time.h  文件中, time(NULL) 打印当前的时间秒数
   time_t nowTime = time(NULL);
   printf("%lld\n",nowTime);
   srand((unsigned int) nowTime);
   int randNum=rand();
   printf("%d\n",randNum);

13.字符串函数
    strlen() 字符串长度,不计算最后一位'\0'
    strcpy(char * dest, char * src);  将src的内容拷贝到dest中. '\0'也会拷贝过去.因为默认是整个字符串.
          也就是说最后会默认带个'\0'
    strncpy(char *dest,char *src,n);不会默认带个'\0',需要手动修改dest[n]=0;

    strcat(char * dest,char * src); 将src追加到dest的末尾.默认包含'\0'
    strncat(char *dest,char *src,n);将src的前n个字符追加到末尾.'\0'
    strncmp(const char *dest,const char *src); 比较前n个字符 .0 相同.
    sprintf(str2,"a==%d, str==%s \n",20,"hello!"); //a==20, str== hello!

    sscanf("原始数据","输出格式",接收的指针地址1,接收指针地址2...)
    char str2[20] ="a==20, str== hello!";    sscanf(str2,"a==%d, str==%s",&a,c);

14.字符串转数字  #include<stdlib.h>
    atoi();  atol(); atof();
















