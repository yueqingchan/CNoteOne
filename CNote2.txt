C基础02
1.函数
  一个 C 程序里有且只有一个main()函数.
  任何函数在调用前,必须在代码前边能找到声明.否则无法编译通过.
  形参都是值传递.

2.多文件编译
   1)#pragma once
      //声明语句
   2) #ifndef _SOMEFILE_H_
      #define _SOMEFILE_H_
      //声明语句
      #endif

3.指针
  指针是内存单元的编号，指针变量是存放地址的变量。
  int num=10;  num变量中的数据是10
  int *p=&num; p中内容是num的指针地址.但是p本身也是单独开辟地址来存放的.
  int *p=null; p本身的地址不是null, 只是p中的内容是null

  &可以取得一个变量在内存中的地址。但是，不能取寄存器变量，因为寄存器变量不在内存里，而在CPU里面，所以是没有地址的。

4.指针大小
  sizeof(void *);32位是4个字节 64位8个字节. 和地址总线有关系,和指针类型无关.
  int a=10;
  int *p=&a;
  p代表的是a变量的内存地址. *p 则代表的是p存储的内存地址的 变量的内容.

5.万能指针
   void*p=NULL;
   空指针
   野指针,  int *p=0XEEEEFFFF;//直接赋值指针就是野指针.
   const修饰的指针:
   const int *pInt=&num;     pInt=&num;//可以再次指向其他,但是不能修改指针内容.
   int * const pInt=&num;    *pInt=20;//可以修改内容,但是不能指向其他.类似于Java的final修饰的对象.

6.指针的运算

  int *pInt; pInt++,代表了内存大小增加一个int的大小. int的长度就是pInt的指针步长.
  char *pChar; pChar++.则代表了新增一个char的大小.

 //指针运算小测试:
  int a[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
  int *p2 = &a[2]; //第2个元素地址
  int *p1 = &a[1]; //第1个元素地址
  printf("p1 = %p, p2 = %p\n", p1, p2);

  int n1 = p2 - p1;           //n1 = 1 这里是按照指针的运算规则,    4字节/int指针步长(4个字节) = 1
  int n2 = (int)p2 - (int)p1; //n2 = 4 这里是转成int来直接运算的.


6.int arr[10]={0};  arr是一个常量,代表了数组的首地址. arr++是错误的,常量不能自增或者自减.

  arr[i]==*(arr+i);

7.数组指针

   char  str[]="HelloWorld!";
   char *pChar=str;
   pChar[0]='A';
   printf("%s\n",str);          //栈上申请的内存,可以修改

   char *pChar2="test";
   pChar[0]='T';
   printf("%s\n",pChar2);//test  常量池,不能修改

8.字符串联系 strstr
  void testStrStr() {

      char str[] = "AAABCDABCDABCD";
      char *pStr=strstr(str, "ABCD");
      int n=0;
      while (pStr!=NULL){
          printf("%s\n",pStr);
          pStr+= strlen("ABCD");                    //指针下移
          n++;
          if (*pStr=='\0'){
              printf("pStr is end of string ");
              break;
          }
          pStr=strstr(pStr, "ABCD");
      }
      printf("End,%d\n",n);

  }

  int calSpaceNum(const char *pStr){
      int length=0;
      if(pStr==NULL){
          return length;
      }
      unsigned long long len= strlen(pStr);
      for (int i = 0; i < len; ++i) {
          if (pStr[i]==' '){
              length++;
          }
      }
      printf("length is : %d\n",length);

      return length;

  }











